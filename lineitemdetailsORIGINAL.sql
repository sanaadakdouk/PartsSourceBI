SET CURRENT SCHEMA = DW;

SET CURRENT PATH = SYSIBM,SYSFUN,SYSPROC,SYSIBMADM,DB2W;

CREATE OR REPLACE PROCEDURE DW.LOAD_LINE_ITEM_DETAILS ( )
  SPECIFIC SQL211020133754876
  LANGUAGE SQL
  NOT DETERMINISTIC
  NO EXTERNAL ACTION
  MODIFIES SQL DATA
  CALLED ON NULL INPUT
  INHERIT SPECIAL REGISTERS
  OLD SAVEPOINT LEVEL
BEGIN
COMMIT;--
EXECUTE IMMEDIATE 'TRUNCATE TABLE dw.LINE_ITEM_DETAILS IMMEDIATE REUSE STORAGE';--

INSERT INTO dw.LINE_ITEM_DETAILS

with
cust_edi as
(
select distinct
cl.line_item_id
from remote_db2p.WORKFLOW.CPO_WORKFLOWS c
left join remote_db2p.WORKFLOW.CPO_WORKFLOWS_LINES cl on cl.CPOWF_ID = c.CPOWF_ID
where c.status_id = 99)
,ESD as
(Select es.LINE_ITEM_ID, CH.DESCRIPTION , es.ESD, o.USER_NAME
from REMOTE_DB2P.PARTS.ESTIMATED_SHIP_DATE es 
left join REMOTE_DB2P.CT.ESD_CHANGE_REASONS CH ON CH.REASON_ID = es.REASON_ID 
left join DW.ORGANIZATION o on o.ORGANIZATION_ID = es.CREATED_USER_ID
WHERE ES.ACTIVE ='Y'
)
, cust_edi855 as
(
SELECT
sli.id_no as line_item_id
, sum(case when cmet.STATUS_ID = -601 then 1 else 0 end) as EDI855
, sum(case when cmet.STATUS_ID = -602 then 1 else 0 end) as EDI856
FROM remote_db2p.PARTS.SLS_LINE_ITEMS SLI
JOIN remote_db2p.PARTS.SLS_ORDERS ORD ON SLI.ORDER_ID = ORD.ID_NO
JOIN remote_db2p.WORKFLOW.CNOT_WORKFLOWS CNOT ON SLI.LINE_ITEM_PO = CNOT.CUSTOMER_PO_NUMBER AND ORD.COMPANY_ID = CNOT.CUSTOMER_ID
join remote_db2p.WORKFLOW.CNOT_MILESTONES cmet on cmet.CNOTWF_ID = CNOT.CNOTWF_ID and cmet.status_id in (-601,-602)
where locate(sli.id_no,cmet.meta) >0
group by
sli.id_no
)
, vend_edi as
(
SELECT
pol.SO_LINE_ITEM_ID as line_item_id
, sum(case when POM.STATUS_ID = -122 then 1 end) as vendor_850
, sum(case when POM.STATUS_ID = -109 then 1 end) as vendor_855
, sum(case when POM.STATUS_ID = -111 then 1 end) as vendor_856
FROM remote_db2p.WORKFLOW.PO_WORKFLOWS POW
JOIN remote_db2p.PARTS.PO_HEADERS POH ON POW.PO_HEADER_ID = POH.ID_NO
JOIN remote_db2p.WORKFLOW.PO_MILESTONES POM ON POM.POWF_ID = POW.POWF_ID
join remote_db2p.PARTS.PO_LINE_ITEMS pol on pol.PURCHASE_ORDER_ID = POH.ID_NO
where POM.STATUS_ID in ( -122,-109,-111)
group by
pol.so_line_item_id
)
, purchase_ord as
(
SELECT LINE_ITEM_ID, max(CREATED_TIMESTAMP) as max_time
FROM remote_db2p.PARTS.SLS_PURCHASE_LINES WHERE STATUS_ID <> 5
group by line_item_id
)
, purchase_ids as
(
select
p.line_item_id
, p.purchase_id
, ct.payment_code
, p.oem_shipping_handling_fee
, p.exchange_fee
, p.processing_fee
, p.minimum_order_fee
, p.transit_coverage
, p.PROGRAM_FEE
from remote_db2p.PARTS.SLS_PURCHASE_LINES p
join purchase_ord o on p.line_item_id = o.line_item_id and p.created_timestamp =o.max_time
left join remote_db2p.ct.ct_sls_payment_codes ct on ct.payment_code_id = p.payment_code_id
)
, backordered as
(
select line_item_id
from DW.LINE_ITEM_STATUS_SUMMARY
where FIRST_BACKORDERED_TIMESTAMP is not null
)
, order_conf as
(
select distinct
sli.id_no
from remote_db2p.PARTS.SLS_LINE_ITEMS sli
LEFT JOIN remote_db2p.PARTS.SLS_LINE_ITEM_ADMIN_ACTIONS AA ON AA.LINE_ITEM_ID = SLI.ID_NO
left JOIN remote_db2p.PARTS.PO_LINE_ITEMS POL ON SLI.ID_NO = POL.SO_LINE_ITEM_ID
left JOIN remote_db2p.WORKFLOW.PO_WORKFLOWS POFLOW ON POL.PURCHASE_ORDER_ID = POFLOW.PO_HEADER_ID
LEFT JOIN remote_db2p.WORKFLOW.PO_MILESTONES STN ON STN.POWF_ID = POFLOW.POWF_ID
where (stn.status_id = -111 OR AA.ACTION_TYPE_ID = 5)
)
, max_time as
(select SLICON.LINE_ITEM_ID
,max(SLICON.CREATED_TIMESTAMP) as time_stamp
from remote_db2p.PARTS.SLS_LINE_ITEM_CONFIRMATIONS SLICON
group by SLICON.LINE_ITEM_ID
)
,update_time as
(
select SLICON.LINE_ITEM_ID
, PP.USER_NAME
, slicon.CONFIRMATION_NOTES
from remote_db2p.PARTS.SLS_LINE_ITEM_CONFIRMATIONS SLICON
LEFT JOIN remote_db2p.CT.PER_PERSONNEL PP ON SLICON.CONFIRMED_BY_ID = PP.ID_NO
inner join max_time mt on mt.LINE_ITEM_ID = SLICON.LINE_ITEM_ID and mt.TIME_STAMP = SLICON.CREATED_TIMESTAMP
)
,invoices as
(select
distinct LINE_ITEM_ID, INVOICE_NUMBER
from remote_db2p.PARTS.SLS_INVOICES
where COALESCE(LINE_NUMBER,0) > 0
)
, received_parts as
(
select
line_item_id
, RECEIVED_BY_CONTACT_ID
, DATE_RECEIVED
, row_number() over(partition by line_item_id order by line_item_id asc) as Row_num --Set unique row count for line_item_id to allow for selection of earliest
from remote_db2p.PARTS.SLS_CUSTOMER_RECEIVED_PARTS
where LINE_ITEM_ID is not null
)
, received_part_sort as
(
select
line_item_id
, RECEIVED_BY_CONTACT_ID
, DATE_RECEIVED
from received_parts
where row_num=1
)
, smart_order_po as
(
SELECT
LINE_ITEM_ID
, sum(1) as t
FROM remote_db2p.PARTS.SLS_LINE_ITEM_ADMIN_ACTIONS
WHERE ACTION_TYPE_ID IN (3,4)
group by
line_item_id
having sum(1) > 0
)
, research_ids as
(
SELECT
SL.LINE_ITEM_ID
, MAX(SL.RESEARCH_TYPE_ID) AS RESEARCHTYPEMAX
, MIN(SL.RESEARCH_TYPE_ID) AS RESEARCHTYPEMIN
, MAX(CASE WHEN SL.RESEARCH_TYPE_ID IN ( 2, 3 ) THEN 1 ELSE 0 END) AS SPPRESEARCH
, MAX(CASE WHEN SL.CREATED_USER_ID = 3 THEN 1 ELSE 0 END) AS SYSTEM_FLAG
FROM remote_db2p.PARTS.SLS_LINE_RESEARCHED_VENDORS SL
GROUP BY SL.LINE_ITEM_ID
)
, ship_documents as
(
SELECT
SDL.LINE_ITEM_ID
, SHP.PRIORITY_CODE
, SSD.ORDER_ID
FROM remote_db2p.PARTS.SLS_SHIPPING_DOCUMENTS SSD
LEFT JOIN remote_db2p.PARTS.SLS_SHIPPING_DOCUMENT_LINES SDL ON SSD.ID_NO = SDL.SHIPPING_DOCUMENT_ID
LEFT JOIN remote_db2p.CT.CT_SHIP_PRIORITIES SHP ON SSD.SHIP_PRIORITY_ID = SHP.PRIORITY_ID
)
, functional_location as
(
SELECT
FV.LINE_ITEM_ID 
, FV.FIELD_VALUE 
FROM remote_db2p.PARTS.SLS_FIELD_VALUES FV 
INNER JOIN remote_db2p.COMPANIES.CMP_FIELD_DEFINITIONS FD ON FD.FIELD_DEF_UID = FV.FIELD_DEF_UID 
where fd.name = 'FunctionalLocationNumber'
)
SELECT DISTINCT
SLI.ID_NO AS LINE_ITEM_ID
, SLI.PART_NUMBER AS REQUESTED_PART_NUMBER
, SLI.PART_NUMBER_STRIPPED AS REQUESTED_PART_NUMBER_STRIPPED
, SLR.REPLACEMENT_PART_NUMBER AS REPLACEMENT_PART_NUMBER
, SLR.REPLACEMENT_PART_NUMBER_STRIPPED
, SLR.CONDITION_ID AS REQUESTED_CONDITION_ID
, COND.CONDITION_CODE AS CONDITION_CODE
, SLI.PHOTO_SHOWN
, SLI.DESCRIPTION AS LINE_ITEM_DESCRIPTION
, CASE WHEN SLI.STATUS_ID IN ( 7, 8, 13, 25, 27 ) THEN
CASE WHEN SLR.RESEARCH_TYPE_ID IN (2,3) THEN 1 ELSE 0 END
WHEN SLI.STATUS_ID IN ( 1, 2, 3, 4, 5, 9, 10, 12, 26 ) THEN
CASE WHEN SLR2.RESEARCHTYPEMIN IN (2,3) AND SLR2.RESEARCHTYPEMAX IN (2,3) THEN 1 ELSE 0 END END AS SMART_PRICE_SELECTED
, CASE WHEN SLI.STATUS_ID IN ( 7, 8, 13, 25, 27 ) THEN
CASE WHEN SLR.RESEARCH_TYPE_ID IN ( 4 ) THEN 1 ELSE 0 END
WHEN SLI.STATUS_ID IN ( 1, 2, 3, 4, 5, 9, 10, 12, 26 ) THEN
CASE WHEN SLR2.RESEARCHTYPEMIN = 1 AND SLR2.RESEARCHTYPEMAX = 1 THEN 0
WHEN SLR2.RESEARCHTYPEMAX IN ( 4 ) THEN 1
WHEN SLR2.RESEARCHTYPEMIN IN ( 1 ) AND SLR2.RESEARCHTYPEMAX IN ( 2,3 ) THEN 1
WHEN SLR2.SYSTEM_FLAG = 1 AND NOT ( SLR2.RESEARCHTYPEMIN IN (2,3) AND SLR2.RESEARCHTYPEMAX IN (2,3) ) THEN 1 ELSE 0 END END AS SMART_SOURCED
, CASE WHEN SLI.STATUS_ID IN ( 7, 8, 13, 25, 27 ) THEN
CASE WHEN SLR.RESEARCH_TYPE_ID = 1 THEN
CASE WHEN SLR2.RESEARCHTYPEMAX = 1 THEN 0
WHEN SLR2.RESEARCHTYPEMAX > 1 THEN 1
END ELSE 0 END ELSE 0 END AS SMART_SOURCING_ALTERNATIVE
, CASE WHEN SLI.STATUS_ID IN ( 7, 8, 13, 25, 27 ) THEN
CASE WHEN SLR.RESEARCH_TYPE_ID = 1 THEN 1 ELSE 0 END
WHEN SLI.STATUS_ID IN ( 1, 2, 3, 4, 5, 9, 10, 12, 26 ) THEN
CASE WHEN SLR2.RESEARCHTYPEMIN = 1 AND SLR2.RESEARCHTYPEMAX = 1 THEN 1 ELSE 0 END END AS MANUAL_RESEARCH
, CASE WHEN SLI.HAD_SMARTPRICED_RESEARCH = 'Y' THEN 1 ELSE 0 END AS SMART_PRICE_PRESENTED
, SLI.RETURN_REQUIRED AS RETURN_REQUIRED
, WC.DESCRIPTION AS WARRANTY_DESCRIPTION
, PP.USER_NAME AS CONFIRMED_BY_NAME
, PKG.PACKAGE_ID
, CASE WHEN LO.LINE_ORIGIN_ID IN (3,4) THEN LO.STATUS_CODE
WHEN LO.LINE_ORIGIN_ID = 100 THEN PKG2.PACKAGE_NAME
ELSE PKG.PACKAGE_NAME
END AS SUBSCRIPTION_NAME
, SLI.LINE_ITEM_PO AS LINE_ITEM_PO
, SLI.WORK_ORDER_NUMBER AS WORK_ORDER_NUMBER
, SLI.EQUIPMENT_NUMBER AS ASSET_ID
, SLI.SERIAL_NUMBER_EQUIPMENT
, SLI.SERIAL_NUMBER
, SLI.SERIAL_NUMBER_CORE
, SLI.MODEL_NUMBER
, SLR.VRM_SCORE
, URG.URGENCY_CODE
, CASE WHEN sopo.LINE_ITEM_ID is not null THEN 1 ELSE 0 END AS SMART_ORDER_PO
, CASE WHEN ocon.id_no is not null THEN 1 ELSE 0 END AS SMART_ORDER_CONF
, SLI.GP_PO_NUMBER AS GP_PO_NUMBER
, INV.INVOICE_NUMBER AS INVOICE_NUMBER
, SLI.STATUS_ID AS LINE_ITEM_STATUS_ID
, SLR.LEAD_TIME_DAYS AS LEAD_TIME_DAYS
, SLI.BACKORDER_SHIP_DATE
, coalesce(slr.item_number
, II.ITEM_NUMBER
, case 
when II.ITEM_NUMBER is null and SLR.INV_ITEM_COST_ID is not null and sli.ORDER_TYPE_ID not in (3,4) then 'V'||SLR.VENDOR_ID||'-'||SLR.REPLACEMENT_PART_NUMBER_STRIPPED 
when sli.ORDER_TYPE_ID in (3,4) and SLR.CREATED_USER_ID=3 and SLR.RESEARCH_TYPE_ID IN (2,3,4) then 'V'||SLR.VENDOR_ID||'-'||SLI.PART_NUMBER_STRIPPED
else null end) AS PIM_ITEM_NUMBER
, FV.FIELD_VALUE AS FUNCTIONAL_LOCATION
, SLI.CREATED_USER_ID
, SLI.CREATED_TIMESTAMP
, SLI.SOURCED_DATE
, SLI.QUOTED_DATE
, SLI.CLOSED_DATE
, SLI.CONFIRMED_DATE
, SLI.PO_DATE
, SLI.GSA_ITEM
, ORD.HERO_KIT
, LO2.STATUS_CODE AS Catalog
, slvp.pricing_rule_id
, slvp.pricing_rule_description
, INTEGER(sli.Quantity+sli.Return_Quantity) as Requested_Quantity
, sli.NOSALE_REASON_ID
, slvp.OEM_ITEM_NUMBER
, case when SLR.INV_ITEM_COST_ID is not null then 'Y' else 'N' end as Catalog_Part
, spl.PURCHASE_ID
, case when sli.ORDER_TYPE_ID in (3,4) then 1 else 0 end as Repair_ind
, case when bord.line_item_id is not null then 1 else 0 end as Ever_Backordered
, case when cedi.line_item_id is not null then 1 else 0 end as Cust_EDI_request
, case when vedi.vendor_850 is not null then 1 else 0 end as Vend_EDI_request
, case when vedi.vendor_856 is not null then 1 else 0 end as Vend_EDI_Ship
, rps.RECEIVED_BY_CONTACT_ID
, rps.DATE_RECEIVED
, case when vedi.vendor_855 is not null then 1 else 0 end as Vend_EDI_CONF
, spl.payment_code as Payment_Method
, spl.oem_shipping_handling_fee as Manufacturer_Fee
, spl.exchange_fee
, spl.processing_fee as Customer_Ship_Fee
, spl.minimum_order_fee
, CASE
WHEN LO.LINE_ORIGIN_ID = 100 THEN pts2.Type_Name
ELSE Pts.Type_Name
END AS SUBSCRIPTION_Type
, case when c855.EDI855 >0 then 1 else 0 end as Cust_EDI_CONF
, case when c855.EDI856 >0 then 1 else 0 end as Cust_EDI_Ship
, substr(pp.CONFIRMATION_NOTES,1,2048) as CONFIRMATION_NOTES
, CASE WHEN SLI.HAD_SMARTSOURCED_RESEARCH = 'Y' THEN 1 ELSE 0 END AS SMART_SOURCE_PRESENTED
, spl.transit_coverage
, sli.cost_center
, spl.PROGRAM_FEE
, case when ool.LINE_ITEM_ID is not null then 1 else 0 end as OEMDIRECT_Ind
,SLR.IS_FORMULARY_OUTRIGHT_OPTION
,SLR.IS_FORMULARY_EXCHANGE_OPTION
,SLR.CONTRACT_PRO_ID
,COND.WEB_DISPLAY_CODE AS WEB_DISPLAY_CODE 
,ES.DESCRIPTION AS ESD_DESCRIPTION
,es.ESD AS ESTIMATED_SHIPPING_DATE
,es.USER_NAME as LAST_ESD_UPDATED_BY
, case when sli.ORDER_TYPE_ID in (17) or SLI.CLASS_ID = 24 then 1 else 0 end as Service_ind
,ord.company_id as CUSTOMER_ID
,SLR.VENDOR_ID
,SLI.MODALITY_ID
,SLI.CLASS_ID
,COALESCE(MPR.PRODUCT_SUBCATEGORY_ID,2) AS PRODUCT_CATEGORY_ID
,SLI.OEM_ID
,ORD.REQUESTOR_ID
,slr.CORE_CHARGE
,SLI.VENDOR_RESEARCH_ID 
,case when SLI.RETURN_REQUIRED = 'Y' then (slr.outright_price-slr.exchange_price)*INTEGER(sli.Quantity+sli.Return_Quantity) else 0 end as Estimated_Add_Bill
,case when spl.exchange_fee > 0 then 1 else 0 end as Exchange_Fee_Charged 
,sli.BACKORDER_FOLLOWUP_DATE
, case when sli.ORDER_TYPE_ID in (37) or SLI.CLASS_ID = 42 then 1 else 0 end as Loaner_ind

FROM REMOTE_DB2P.PARTS.SLS_LINE_ITEMS SLI
LEFT JOIN REMOTE_DB2P.PARTS.SLS_LINE_RESEARCHED_VENDORS SLR ON SLI.VENDOR_RESEARCH_ID = SLR.ID_NO
LEFT JOIN REMOTE_DB2P.PIM.ITEMS II ON II.ITEM_ID = SLR.INV_ITEM_COST_ID

LEFT JOIN research_ids SLR2 ON SLI.ID_NO = SLR2.LINE_ITEM_ID
LEFT JOIN REMOTE_DB2P.CT.CT_INV_ITEM_CONDITION_CODES COND ON SLR.CONDITION_ID = COND.CONDITION_ID
LEFT JOIN REMOTE_DB2P.CT.CT_WARRANTY_CODES WC ON SLR.WARRANTY_ID = WC.WARRANTY_ID
LEFT JOIN update_time pp on pp.line_item_id = sli.id_no
LEFT JOIN ship_documents SSD ON SLI.ORDER_ID = SSD.ORDER_ID AND SLI.ID_NO = SSD.LINE_ITEM_ID 
/*Line Origin Joins*/
LEFT JOIN REMOTE_DB2P.CT.CT_LINE_ORIGIN LO ON SLI.LINE_ORIGIN_ID = LO.LINE_ORIGIN_ID AND LO.LINE_ORIGIN_ID NOT IN (1,2)
LEFT JOIN REMOTE_DB2P.CT.CT_LINE_ORIGIN LO2 ON (case when SLI.LINE_ORIGIN_ID in (3,4) then 2 else sli.line_origin_id end ) = LO2.LINE_ORIGIN_ID
LEFT JOIN REMOTE_DB2P.COMPANIES.WS_SUBSCRIPTIONS SUB ON SUB.SUBSCRIPTION_ID = LO.SUBSCRIPTION_ID
LEFT JOIN REMOTE_DB2P.CT.CT_CMP_PACKAGES PKG ON SUB.PACKAGE_ID = PKG.PACKAGE_ID
left join REMOTE_DB2P.ct.ct_cmp_package_types pts on pts.type_id = pkg.type_id
left join REMOTE_DB2P.PARTS.WS_CUSTOMER_LINE_ORDER_KEYS clok on clok.Line_item_id = SLI.ID_NO
LEFT JOIN REMOTE_DB2P.COMPANIES.WS_SUBSCRIPTIONS SUB2 ON SUB2.SUBSCRIPTION_ID = clok.SUBSCRIPTION_ID
LEFT JOIN REMOTE_DB2P.CT.CT_CMP_PACKAGES PKG2 ON SUB2.PACKAGE_ID = PKG2.PACKAGE_ID
left join REMOTE_DB2P.ct.ct_cmp_package_types pts2 on pts2.type_id = pkg2.type_id

LEFT JOIN REMOTE_DB2P.CT.CT_SLS_URGENCY_CODES URG ON SLI.URGENCY_ID = URG.URGENCY_ID
LEFT JOIN invoices INV ON SLI.ID_NO = INV.LINE_ITEM_ID
LEFT JOIN functional_location FV ON FV.LINE_ITEM_ID = SLI.ID_NO
LEFT JOIN REMOTE_DB2P.PARTS.SLS_ORDERS ORD ON ORD.ID_NO = SLI.ORDER_ID
left join REMOTE_DB2P.parts.sls_line_researched_vendors_pricing slvp on slvp.vendor_research_id = SLR.ID_NO
left join order_conf ocon on ocon.id_no = sli.id_no
LEFT JOIN purchase_ids SPL ON SLI.ID_NO = SPL.LINE_ITEM_ID
left join backordered bord on bord.line_item_id = sli.id_no
left join cust_edi cedi on cedi.line_item_id = sli.id_no
left join vend_edi vedi on vedi.line_item_id = sli.id_no
left join received_part_sort rps on rps.line_item_id = sli.id_no
left join cust_edi855 c855 on c855.line_item_id = sli.id_no
left join smart_order_po sopo on sopo.line_item_id = sli.id_no
left JOIN REMOTE_DB2P.OEMDIRECT.ORDER_LINES ool ON ool.LINE_ITEM_ID = sli.ID_NO
LEFT JOIN ESD ES ON ES.LINE_ITEM_ID = SLI.ID_NO
left join REMOTE_DB2P.CT.CT_MODALITY_PRODTYPE_RELATIONS MPR on MPR.MODALITY_ID = SLI.MODALITY_ID AND MPR.PRODUCT_TYPE_ID = SLI.CLASS_ID


WHERE SLI.CREATED_TIMESTAMP >= '2008-01-01'
WITH ur;
end;

SET CURRENT SCHEMA = "MySchema";

